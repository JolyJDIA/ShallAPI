package jolyjdia.api.database;

import com.zaxxer.hikari.HikariDataSource;
import org.jetbrains.annotations.NotNull;

import java.sql.*;

public class AbstractMySqlHikari extends MySqlExecutor {
    private final HikariDataSource dataSource;

    public AbstractMySqlHikari(String username, String password, String url) {
        super(username, password, url);
        HikariDataSource source = new HikariDataSource();
        source.setPoolName("RoflanHikariSqlPool");
        source.setUsername(getUsername());
        source.setPassword(getPassword());
        source.setJdbcUrl(getUrl());
        source.addDataSourceProperty("useSSL", "true");
        source.addDataSourceProperty("cachePrepStmts", "true");
        source.addDataSourceProperty("prepStmtCacheSize", "250");
        source.addDataSourceProperty("prepStmtCacheSqlLimit", "2048");//600
        source.addDataSourceProperty("useServerPrepStmts", "true");
        this.dataSource = source;
    }
    @Override
    public Connection getConnection() throws SQLException {
        return dataSource.getConnection();
    }
    @Override
    public void close() {
        dataSource.close();
        System.out.println("[MySQL] connections closed");
    }
    @Override
    public void preparedStatement(final String sql,
                                  @NotNull StatementConsumer<? super PreparedStatement> statement) {
        try (Connection connection = getConnection();
             PreparedStatement ps = connection.prepareStatement(sql)
        ) {
            statement.accept(ps);//execute
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void preparedStatementExecute(final String sql) {
        try (Connection connection = getConnection();
             PreparedStatement ps = connection.prepareStatement(sql)
        ) {
            ps.execute();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    @Override
    public <T> T preparedExecuteQuery(final String sql,
                                      @NotNull StatementConsumer<? super PreparedStatement> statement,
                                      @NotNull ResultConsumer<? extends T> result) {
        try (Connection connection = getConnection();
             PreparedStatement ps = connection.prepareStatement(sql)
        ) {
            statement.accept(ps);
            try (ResultSet rs = ps.executeQuery()) {
                return result.get(rs);
            }
        } catch (SQLException e) {
            throw new RuntimeException("[MySQL] обосрався результат", e);
        }
    }
    @Override
    public void preparedExecuteQuery(final String sql,
                                     @NotNull StatementConsumer<? super PreparedStatement> statement,
                                     @NotNull StatementConsumer<? super ResultSet> result) {
        try (Connection connection = getConnection();
             PreparedStatement ps = connection.prepareStatement(sql)
        ) {
            statement.accept(ps);
            try (ResultSet rs = ps.executeQuery()) {
                result.accept(rs);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    @Override
    public int preparedAutoGeneratedKeys(final String sql,
                                         @NotNull StatementConsumer<? super PreparedStatement> statement,
                                         int autoGeneratedKeys) {
        try (Connection connection = getConnection();
             PreparedStatement ps = connection.prepareStatement(sql, autoGeneratedKeys)
        ) {
            statement.accept(ps);
            try (ResultSet rs = ps.getGeneratedKeys()) {
                if (rs.next()) {
                    return rs.getInt(1);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        throw new RuntimeException("[MySQL] Ошибка в получении ключа");
    }
    @Override
    public void unpreparedExecute(final String sql) {
        try (Connection connection = getConnection();
             Statement statement = connection.createStatement()
        ) {
            statement.execute(sql);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void unpreparedExecuteQuery(final String sql,
                                       @NotNull StatementConsumer<? super ResultSet> result) {
        try (Connection connection = getConnection();
             Statement statement = connection.createStatement();
             ResultSet rs = statement.executeQuery(sql)
        ) {
            result.accept(rs);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void unpreparedStatement(@NotNull StatementConsumer<? super Statement> s) {
        try (Connection connection = getConnection();
             Statement statement = connection.createStatement()
        ) {
            s.accept(statement);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}